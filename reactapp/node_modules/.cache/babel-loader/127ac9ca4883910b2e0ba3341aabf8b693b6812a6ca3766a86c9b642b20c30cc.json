{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Client = void 0;\nconst socket_io_parser_1 = require(\"socket.io-parser\");\nconst debugModule = require(\"debug\");\nconst url = require(\"url\");\nconst debug = debugModule(\"socket.io:client\");\nclass Client {\n  /**\n   * Client constructor.\n   *\n   * @param server instance\n   * @param conn\n   * @package\n   */\n  constructor(server, conn) {\n    this.sockets = new Map();\n    this.nsps = new Map();\n    this.server = server;\n    this.conn = conn;\n    this.encoder = server.encoder;\n    this.decoder = new server._parser.Decoder();\n    this.id = conn.id;\n    this.setup();\n  }\n  /**\n   * @return the reference to the request that originated the Engine.IO connection\n   *\n   * @public\n   */\n  get request() {\n    return this.conn.request;\n  }\n  /**\n   * Sets up event listeners.\n   *\n   * @private\n   */\n  setup() {\n    this.onclose = this.onclose.bind(this);\n    this.ondata = this.ondata.bind(this);\n    this.onerror = this.onerror.bind(this);\n    this.ondecoded = this.ondecoded.bind(this);\n    // @ts-ignore\n    this.decoder.on(\"decoded\", this.ondecoded);\n    this.conn.on(\"data\", this.ondata);\n    this.conn.on(\"error\", this.onerror);\n    this.conn.on(\"close\", this.onclose);\n    this.connectTimeout = setTimeout(() => {\n      if (this.nsps.size === 0) {\n        debug(\"no namespace joined yet, close the client\");\n        this.close();\n      } else {\n        debug(\"the client has already joined a namespace, nothing to do\");\n      }\n    }, this.server._connectTimeout);\n  }\n  /**\n   * Connects a client to a namespace.\n   *\n   * @param {String} name - the namespace\n   * @param {Object} auth - the auth parameters\n   * @private\n   */\n  connect(name) {\n    let auth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (this.server._nsps.has(name)) {\n      debug(\"connecting to namespace %s\", name);\n      return this.doConnect(name, auth);\n    }\n    this.server._checkNamespace(name, auth, dynamicNspName => {\n      if (dynamicNspName) {\n        this.doConnect(name, auth);\n      } else {\n        debug(\"creation of namespace %s was denied\", name);\n        this._packet({\n          type: socket_io_parser_1.PacketType.CONNECT_ERROR,\n          nsp: name,\n          data: {\n            message: \"Invalid namespace\"\n          }\n        });\n      }\n    });\n  }\n  /**\n   * Connects a client to a namespace.\n   *\n   * @param name - the namespace\n   * @param {Object} auth - the auth parameters\n   *\n   * @private\n   */\n  doConnect(name, auth) {\n    const nsp = this.server.of(name);\n    nsp._add(this, auth, socket => {\n      this.sockets.set(socket.id, socket);\n      this.nsps.set(nsp.name, socket);\n      if (this.connectTimeout) {\n        clearTimeout(this.connectTimeout);\n        this.connectTimeout = undefined;\n      }\n    });\n  }\n  /**\n   * Disconnects from all namespaces and closes transport.\n   *\n   * @private\n   */\n  _disconnect() {\n    for (const socket of this.sockets.values()) {\n      socket.disconnect();\n    }\n    this.sockets.clear();\n    this.close();\n  }\n  /**\n   * Removes a socket. Called by each `Socket`.\n   *\n   * @private\n   */\n  _remove(socket) {\n    if (this.sockets.has(socket.id)) {\n      const nsp = this.sockets.get(socket.id).nsp.name;\n      this.sockets.delete(socket.id);\n      this.nsps.delete(nsp);\n    } else {\n      debug(\"ignoring remove for %s\", socket.id);\n    }\n  }\n  /**\n   * Closes the underlying connection.\n   *\n   * @private\n   */\n  close() {\n    if (\"open\" === this.conn.readyState) {\n      debug(\"forcing transport close\");\n      this.conn.close();\n      this.onclose(\"forced server close\");\n    }\n  }\n  /**\n   * Writes a packet to the transport.\n   *\n   * @param {Object} packet object\n   * @param {Object} opts\n   * @private\n   */\n  _packet(packet) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (this.conn.readyState !== \"open\") {\n      debug(\"ignoring packet write %j\", packet);\n      return;\n    }\n    const encodedPackets = opts.preEncoded ? packet // previous versions of the adapter incorrectly used socket.packet() instead of writeToEngine()\n    : this.encoder.encode(packet);\n    this.writeToEngine(encodedPackets, opts);\n  }\n  writeToEngine(encodedPackets, opts) {\n    if (opts.volatile && !this.conn.transport.writable) {\n      debug(\"volatile packet is discarded since the transport is not currently writable\");\n      return;\n    }\n    const packets = Array.isArray(encodedPackets) ? encodedPackets : [encodedPackets];\n    for (const encodedPacket of packets) {\n      this.conn.write(encodedPacket, opts);\n    }\n  }\n  /**\n   * Called with incoming transport data.\n   *\n   * @private\n   */\n  ondata(data) {\n    // try/catch is needed for protocol violations (GH-1880)\n    try {\n      this.decoder.add(data);\n    } catch (e) {\n      debug(\"invalid packet format\");\n      this.onerror(e);\n    }\n  }\n  /**\n   * Called when parser fully decodes a packet.\n   *\n   * @private\n   */\n  ondecoded(packet) {\n    let namespace;\n    let authPayload;\n    if (this.conn.protocol === 3) {\n      const parsed = url.parse(packet.nsp, true);\n      namespace = parsed.pathname;\n      authPayload = parsed.query;\n    } else {\n      namespace = packet.nsp;\n      authPayload = packet.data;\n    }\n    const socket = this.nsps.get(namespace);\n    if (!socket && packet.type === socket_io_parser_1.PacketType.CONNECT) {\n      this.connect(namespace, authPayload);\n    } else if (socket && packet.type !== socket_io_parser_1.PacketType.CONNECT && packet.type !== socket_io_parser_1.PacketType.CONNECT_ERROR) {\n      process.nextTick(function () {\n        socket._onpacket(packet);\n      });\n    } else {\n      debug(\"invalid state (packet type: %s)\", packet.type);\n      this.close();\n    }\n  }\n  /**\n   * Handles an error.\n   *\n   * @param {Object} err object\n   * @private\n   */\n  onerror(err) {\n    for (const socket of this.sockets.values()) {\n      socket._onerror(err);\n    }\n    this.conn.close();\n  }\n  /**\n   * Called upon transport close.\n   *\n   * @param reason\n   * @param description\n   * @private\n   */\n  onclose(reason, description) {\n    debug(\"client close with reason %s\", reason);\n    // ignore a potential subsequent `close` event\n    this.destroy();\n    // `nsps` and `sockets` are cleaned up seamlessly\n    for (const socket of this.sockets.values()) {\n      socket._onclose(reason, description);\n    }\n    this.sockets.clear();\n    this.decoder.destroy(); // clean up decoder\n  }\n  /**\n   * Cleans up event listeners.\n   * @private\n   */\n  destroy() {\n    this.conn.removeListener(\"data\", this.ondata);\n    this.conn.removeListener(\"error\", this.onerror);\n    this.conn.removeListener(\"close\", this.onclose);\n    // @ts-ignore\n    this.decoder.removeListener(\"decoded\", this.ondecoded);\n    if (this.connectTimeout) {\n      clearTimeout(this.connectTimeout);\n      this.connectTimeout = undefined;\n    }\n  }\n}\nexports.Client = Client;","map":{"version":3,"names":["Object","defineProperty","exports","value","Client","socket_io_parser_1","require","debugModule","url","debug","constructor","server","conn","sockets","Map","nsps","encoder","decoder","_parser","Decoder","id","setup","request","onclose","bind","ondata","onerror","ondecoded","on","connectTimeout","setTimeout","size","close","_connectTimeout","connect","name","auth","arguments","length","undefined","_nsps","has","doConnect","_checkNamespace","dynamicNspName","_packet","type","PacketType","CONNECT_ERROR","nsp","data","message","of","_add","socket","set","clearTimeout","_disconnect","values","disconnect","clear","_remove","get","delete","readyState","packet","opts","encodedPackets","preEncoded","encode","writeToEngine","volatile","transport","writable","packets","Array","isArray","encodedPacket","write","add","e","namespace","authPayload","protocol","parsed","parse","pathname","query","CONNECT","process","nextTick","_onpacket","err","_onerror","reason","description","destroy","_onclose","removeListener"],"sources":["/home/priyanshu/Desktop/rebook/main/reactapp/node_modules/socket.io/dist/client.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Client = void 0;\nconst socket_io_parser_1 = require(\"socket.io-parser\");\nconst debugModule = require(\"debug\");\nconst url = require(\"url\");\nconst debug = debugModule(\"socket.io:client\");\nclass Client {\n    /**\n     * Client constructor.\n     *\n     * @param server instance\n     * @param conn\n     * @package\n     */\n    constructor(server, conn) {\n        this.sockets = new Map();\n        this.nsps = new Map();\n        this.server = server;\n        this.conn = conn;\n        this.encoder = server.encoder;\n        this.decoder = new server._parser.Decoder();\n        this.id = conn.id;\n        this.setup();\n    }\n    /**\n     * @return the reference to the request that originated the Engine.IO connection\n     *\n     * @public\n     */\n    get request() {\n        return this.conn.request;\n    }\n    /**\n     * Sets up event listeners.\n     *\n     * @private\n     */\n    setup() {\n        this.onclose = this.onclose.bind(this);\n        this.ondata = this.ondata.bind(this);\n        this.onerror = this.onerror.bind(this);\n        this.ondecoded = this.ondecoded.bind(this);\n        // @ts-ignore\n        this.decoder.on(\"decoded\", this.ondecoded);\n        this.conn.on(\"data\", this.ondata);\n        this.conn.on(\"error\", this.onerror);\n        this.conn.on(\"close\", this.onclose);\n        this.connectTimeout = setTimeout(() => {\n            if (this.nsps.size === 0) {\n                debug(\"no namespace joined yet, close the client\");\n                this.close();\n            }\n            else {\n                debug(\"the client has already joined a namespace, nothing to do\");\n            }\n        }, this.server._connectTimeout);\n    }\n    /**\n     * Connects a client to a namespace.\n     *\n     * @param {String} name - the namespace\n     * @param {Object} auth - the auth parameters\n     * @private\n     */\n    connect(name, auth = {}) {\n        if (this.server._nsps.has(name)) {\n            debug(\"connecting to namespace %s\", name);\n            return this.doConnect(name, auth);\n        }\n        this.server._checkNamespace(name, auth, (dynamicNspName) => {\n            if (dynamicNspName) {\n                this.doConnect(name, auth);\n            }\n            else {\n                debug(\"creation of namespace %s was denied\", name);\n                this._packet({\n                    type: socket_io_parser_1.PacketType.CONNECT_ERROR,\n                    nsp: name,\n                    data: {\n                        message: \"Invalid namespace\",\n                    },\n                });\n            }\n        });\n    }\n    /**\n     * Connects a client to a namespace.\n     *\n     * @param name - the namespace\n     * @param {Object} auth - the auth parameters\n     *\n     * @private\n     */\n    doConnect(name, auth) {\n        const nsp = this.server.of(name);\n        nsp._add(this, auth, (socket) => {\n            this.sockets.set(socket.id, socket);\n            this.nsps.set(nsp.name, socket);\n            if (this.connectTimeout) {\n                clearTimeout(this.connectTimeout);\n                this.connectTimeout = undefined;\n            }\n        });\n    }\n    /**\n     * Disconnects from all namespaces and closes transport.\n     *\n     * @private\n     */\n    _disconnect() {\n        for (const socket of this.sockets.values()) {\n            socket.disconnect();\n        }\n        this.sockets.clear();\n        this.close();\n    }\n    /**\n     * Removes a socket. Called by each `Socket`.\n     *\n     * @private\n     */\n    _remove(socket) {\n        if (this.sockets.has(socket.id)) {\n            const nsp = this.sockets.get(socket.id).nsp.name;\n            this.sockets.delete(socket.id);\n            this.nsps.delete(nsp);\n        }\n        else {\n            debug(\"ignoring remove for %s\", socket.id);\n        }\n    }\n    /**\n     * Closes the underlying connection.\n     *\n     * @private\n     */\n    close() {\n        if (\"open\" === this.conn.readyState) {\n            debug(\"forcing transport close\");\n            this.conn.close();\n            this.onclose(\"forced server close\");\n        }\n    }\n    /**\n     * Writes a packet to the transport.\n     *\n     * @param {Object} packet object\n     * @param {Object} opts\n     * @private\n     */\n    _packet(packet, opts = {}) {\n        if (this.conn.readyState !== \"open\") {\n            debug(\"ignoring packet write %j\", packet);\n            return;\n        }\n        const encodedPackets = opts.preEncoded\n            ? packet // previous versions of the adapter incorrectly used socket.packet() instead of writeToEngine()\n            : this.encoder.encode(packet);\n        this.writeToEngine(encodedPackets, opts);\n    }\n    writeToEngine(encodedPackets, opts) {\n        if (opts.volatile && !this.conn.transport.writable) {\n            debug(\"volatile packet is discarded since the transport is not currently writable\");\n            return;\n        }\n        const packets = Array.isArray(encodedPackets)\n            ? encodedPackets\n            : [encodedPackets];\n        for (const encodedPacket of packets) {\n            this.conn.write(encodedPacket, opts);\n        }\n    }\n    /**\n     * Called with incoming transport data.\n     *\n     * @private\n     */\n    ondata(data) {\n        // try/catch is needed for protocol violations (GH-1880)\n        try {\n            this.decoder.add(data);\n        }\n        catch (e) {\n            debug(\"invalid packet format\");\n            this.onerror(e);\n        }\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n        let namespace;\n        let authPayload;\n        if (this.conn.protocol === 3) {\n            const parsed = url.parse(packet.nsp, true);\n            namespace = parsed.pathname;\n            authPayload = parsed.query;\n        }\n        else {\n            namespace = packet.nsp;\n            authPayload = packet.data;\n        }\n        const socket = this.nsps.get(namespace);\n        if (!socket && packet.type === socket_io_parser_1.PacketType.CONNECT) {\n            this.connect(namespace, authPayload);\n        }\n        else if (socket &&\n            packet.type !== socket_io_parser_1.PacketType.CONNECT &&\n            packet.type !== socket_io_parser_1.PacketType.CONNECT_ERROR) {\n            process.nextTick(function () {\n                socket._onpacket(packet);\n            });\n        }\n        else {\n            debug(\"invalid state (packet type: %s)\", packet.type);\n            this.close();\n        }\n    }\n    /**\n     * Handles an error.\n     *\n     * @param {Object} err object\n     * @private\n     */\n    onerror(err) {\n        for (const socket of this.sockets.values()) {\n            socket._onerror(err);\n        }\n        this.conn.close();\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n        debug(\"client close with reason %s\", reason);\n        // ignore a potential subsequent `close` event\n        this.destroy();\n        // `nsps` and `sockets` are cleaned up seamlessly\n        for (const socket of this.sockets.values()) {\n            socket._onclose(reason, description);\n        }\n        this.sockets.clear();\n        this.decoder.destroy(); // clean up decoder\n    }\n    /**\n     * Cleans up event listeners.\n     * @private\n     */\n    destroy() {\n        this.conn.removeListener(\"data\", this.ondata);\n        this.conn.removeListener(\"error\", this.onerror);\n        this.conn.removeListener(\"close\", this.onclose);\n        // @ts-ignore\n        this.decoder.removeListener(\"decoded\", this.ondecoded);\n        if (this.connectTimeout) {\n            clearTimeout(this.connectTimeout);\n            this.connectTimeout = undefined;\n        }\n    }\n}\nexports.Client = Client;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}