{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodePayload = exports.decodePacket = exports.encodePayload = exports.encodePacketToBinary = exports.encodePacket = exports.protocol = exports.decodePacketFromBinary = void 0;\nconst encodePacket_js_1 = require(\"./encodePacket.js\");\nObject.defineProperty(exports, \"encodePacket\", {\n  enumerable: true,\n  get: function () {\n    return encodePacket_js_1.encodePacket;\n  }\n});\nObject.defineProperty(exports, \"encodePacketToBinary\", {\n  enumerable: true,\n  get: function () {\n    return encodePacket_js_1.encodePacketToBinary;\n  }\n});\nconst decodePacket_js_1 = require(\"./decodePacket.js\");\nObject.defineProperty(exports, \"decodePacket\", {\n  enumerable: true,\n  get: function () {\n    return decodePacket_js_1.decodePacket;\n  }\n});\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\nconst encodePayload = (packets, callback) => {\n  // some packets may be added to the array while encoding, so the initial length must be saved\n  const length = packets.length;\n  const encodedPackets = new Array(length);\n  let count = 0;\n  packets.forEach((packet, i) => {\n    // force base64 encoding for binary packets\n    (0, encodePacket_js_1.encodePacket)(packet, false, encodedPacket => {\n      encodedPackets[i] = encodedPacket;\n      if (++count === length) {\n        callback(encodedPackets.join(SEPARATOR));\n      }\n    });\n  });\n};\nexports.encodePayload = encodePayload;\nconst decodePayload = (encodedPayload, binaryType) => {\n  const encodedPackets = encodedPayload.split(SEPARATOR);\n  const packets = [];\n  for (let i = 0; i < encodedPackets.length; i++) {\n    const decodedPacket = (0, decodePacket_js_1.decodePacket)(encodedPackets[i], binaryType);\n    packets.push(decodedPacket);\n    if (decodedPacket.type === \"error\") {\n      break;\n    }\n  }\n  return packets;\n};\nexports.decodePayload = decodePayload;\nlet TEXT_DECODER;\nfunction decodePacketFromBinary(data, isBinary, binaryType) {\n  if (!TEXT_DECODER) {\n    // lazily created for compatibility with old browser platforms\n    TEXT_DECODER = new TextDecoder();\n  }\n  // 48 === \"0\".charCodeAt(0) (OPEN packet type)\n  // 54 === \"6\".charCodeAt(0) (NOOP packet type)\n  const isPlainBinary = isBinary || data[0] < 48 || data[0] > 54;\n  return (0, decodePacket_js_1.decodePacket)(isPlainBinary ? data : TEXT_DECODER.decode(data), binaryType);\n}\nexports.decodePacketFromBinary = decodePacketFromBinary;\nexports.protocol = 4;","map":{"version":3,"names":["Object","defineProperty","exports","value","decodePayload","decodePacket","encodePayload","encodePacketToBinary","encodePacket","protocol","decodePacketFromBinary","encodePacket_js_1","require","enumerable","get","decodePacket_js_1","SEPARATOR","String","fromCharCode","packets","callback","length","encodedPackets","Array","count","forEach","packet","i","encodedPacket","join","encodedPayload","binaryType","split","decodedPacket","push","type","TEXT_DECODER","data","isBinary","TextDecoder","isPlainBinary","decode"],"sources":["/home/priyanshu/Desktop/rebook/main/reactapp/node_modules/engine.io-parser/build/cjs/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodePayload = exports.decodePacket = exports.encodePayload = exports.encodePacketToBinary = exports.encodePacket = exports.protocol = exports.decodePacketFromBinary = void 0;\nconst encodePacket_js_1 = require(\"./encodePacket.js\");\nObject.defineProperty(exports, \"encodePacket\", { enumerable: true, get: function () { return encodePacket_js_1.encodePacket; } });\nObject.defineProperty(exports, \"encodePacketToBinary\", { enumerable: true, get: function () { return encodePacket_js_1.encodePacketToBinary; } });\nconst decodePacket_js_1 = require(\"./decodePacket.js\");\nObject.defineProperty(exports, \"decodePacket\", { enumerable: true, get: function () { return decodePacket_js_1.decodePacket; } });\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\nconst encodePayload = (packets, callback) => {\n    // some packets may be added to the array while encoding, so the initial length must be saved\n    const length = packets.length;\n    const encodedPackets = new Array(length);\n    let count = 0;\n    packets.forEach((packet, i) => {\n        // force base64 encoding for binary packets\n        (0, encodePacket_js_1.encodePacket)(packet, false, encodedPacket => {\n            encodedPackets[i] = encodedPacket;\n            if (++count === length) {\n                callback(encodedPackets.join(SEPARATOR));\n            }\n        });\n    });\n};\nexports.encodePayload = encodePayload;\nconst decodePayload = (encodedPayload, binaryType) => {\n    const encodedPackets = encodedPayload.split(SEPARATOR);\n    const packets = [];\n    for (let i = 0; i < encodedPackets.length; i++) {\n        const decodedPacket = (0, decodePacket_js_1.decodePacket)(encodedPackets[i], binaryType);\n        packets.push(decodedPacket);\n        if (decodedPacket.type === \"error\") {\n            break;\n        }\n    }\n    return packets;\n};\nexports.decodePayload = decodePayload;\nlet TEXT_DECODER;\nfunction decodePacketFromBinary(data, isBinary, binaryType) {\n    if (!TEXT_DECODER) {\n        // lazily created for compatibility with old browser platforms\n        TEXT_DECODER = new TextDecoder();\n    }\n    // 48 === \"0\".charCodeAt(0) (OPEN packet type)\n    // 54 === \"6\".charCodeAt(0) (NOOP packet type)\n    const isPlainBinary = isBinary || data[0] < 48 || data[0] > 54;\n    return (0, decodePacket_js_1.decodePacket)(isPlainBinary ? data : TEXT_DECODER.decode(data), binaryType);\n}\nexports.decodePacketFromBinary = decodePacketFromBinary;\nexports.protocol = 4;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}